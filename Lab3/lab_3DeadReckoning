package lab3;

import lejos.hardware.Button;
import lejos.hardware.Sound;
import lejos.hardware.motor.EV3MediumRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3TouchSensor;
import lejos.hardware.sensor.EV3UltrasonicSensor;
import lejos.hardware.sensor.EV3GyroSensor;
import lejos.hardware.sensor.SensorMode;
import lejos.utility.Delay;
import lejos.hardware.lcd.LCD;
import lejos.utility.Stopwatch;
import java.util.ArrayList;
/*
 * Takoda Ren 730093699
 * Noah Sayre 730006807
 */
public class Lab3DeadReckon {
	private static final double PI = 3.14159265;
	private static final double wheelRadius = .028;
	private static final float L = .127f;
	public static float xCoordinate, yCoordinate;
	public static double heading;
	public static float dt = 0.0f; //somethingRandomRN;
	public static void main(String[] args){
		EV3MediumRegulatedMotor mA = new EV3MediumRegulatedMotor(MotorPort.A);
		EV3MediumRegulatedMotor mB = new EV3MediumRegulatedMotor(MotorPort.B);
		EV3UltrasonicSensor usltrasonic = new EV3UltrasonicSensor(SensorPort.S4);
		EV3TouchSensor touchLeft = new EV3TouchSensor(SensorPort.S1);
		EV3TouchSensor touchRight = new EV3TouchSensor(SensorPort.S2); 
		EV3GyroSensor gyro = new EV3GyroSensor(SensorPort.S3);
		Stopwatch stop = new Stopwatch();
		
		
		mA.synchronizeWith(new EV3MediumRegulatedMotor[]{mB});
		
		SensorMode ultrasonicSensor = (SensorMode) usltrasonic.getDistanceMode();
		SensorMode touchSensorLeft = touchLeft.getTouchMode();
		SensorMode touchSensorRight = touchRight.getTouchMode();
		SensorMode gyroSensor = (SensorMode) gyro.getAngleMode();
		
		float[] ultrasonicSamples = new float[ultrasonicSensor.sampleSize()];
		float[] touchSamplesLeft = new float[touchSensorLeft.sampleSize()];
		float[] touchSamplesRight = new float[touchSensorRight.sampleSize()];
		float[] gyroSamples = new float[gyroSensor.sampleSize()];
		
		mA.setSpeed(200);
		mB.setSpeed(200);
		
		Button.ENTER.waitForPressAndRelease();
		
		touchLeft.fetchSample(touchSamplesLeft, 0);
		touchRight.fetchSample(touchSamplesRight, 0);
		long time = System.currentTimeMillis();
		
		//long dt = System.currentTimeMillis();
		//float x = 0.0f;
		//ArrayList<Long> abc = new ArrayList<Long>();
		while(touchSamplesLeft[0] == 0 && touchSamplesRight[0] == 0){
		//	dt = System.currentTimeMillis();
			forward(mA, mB);
			touchLeft.fetchSample(touchSamplesLeft, 0);
			touchRight.fetchSample(touchSamplesRight, 0);
		//	x += (.0039f);
		//	abc.add(System.currentTimeMillis() - dt);
		}
		//stop(mA, mB);
		//int average = 0;
		//for(int i = 0; i < abc.size(); i++) {
		//	average += abc.get(i);
		//}
	//	average = average / abc.size();
	//	LCD.drawInt((int)(100 * average), 0, 1);
	//	LCD.drawInt((int)(100 * x), 0, 3);
	//	Delay.msDelay(4000);
		
		
		
		time = System.currentTimeMillis() - time;
		//LCD.drawInt((int)(time * 1000), 0, 1);
		stop(mA, mB);
		Sound.beep();
		backward(mA, mB);
		Delay.msDelay(1500);
		stop(mA, mB);
		
		mA.rotate(380);

		Delay.msDelay(500);
		
		xCoordinate = 0; yCoordinate = 0;
		heading = 0;
		
		gyro.reset();
		gyroSensor.fetchSample(gyroSamples, 0);
		float initialAngle = gyroSamples[0];
		//LCD.drawInt((int)(initialAngle), 0, 2);
		
		ultrasonicSensor.fetchSample(ultrasonicSamples,0);
		float distance = ultrasonicSamples[0];
		float desiredDistance = .15f;
		
		float sampleVal;
		ultrasonicSensor.fetchSample(ultrasonicSamples, 0);
		sampleVal = ultrasonicSamples[0];
		ArrayList<Float> running = new ArrayList<Float>(10);
		running.add(sampleVal);
		int count = 0;
		
		float dt = 0.0f;
		
		while(distance < .5){
			LCD.drawInt((int)(heading * 100), 0, 1);
			LCD.drawInt((int)(100 * xCoordinate), 0, 2);
			LCD.drawInt((int)(100 * yCoordinate), 0, 3);
			stop.reset();
			dt = 0;
			count++;
			LCD.clear();
//			gyroSensor.fetchSample(gyroSamples, 0);
//			LCD.drawInt((int)(gyroSamples[0]), 0, 2);
//			if (gyroSamples[0] > 355) {
//				break;
//			}
			float dist = .3f;
			if(count > 5000 && xCoordinate > -dist && xCoordinate < dist && yCoordinate > -dist && yCoordinate < dist){
				break;
			}
			ArrayList<Float> goodReadings = new ArrayList<Float>(5);
			float[] reads = new float[5];
			float lastReading = running.get(running.size()-1);
			boolean gotSample = false;
			for (int i = 0; i < 5; i++) {
				ultrasonicSensor.fetchSample(ultrasonicSamples, 0);
				sampleVal = ultrasonicSamples[0];
				reads[i] = sampleVal;
				//LCD.drawInt((int)(sampleVal * 100), 0, 2);
				if((lastReading - 0.1) < sampleVal && (lastReading + 0.1) > sampleVal && sampleVal != Float.POSITIVE_INFINITY) {
					gotSample = true;
					goodReadings.add(sampleVal);
				}
			}
			if(gotSample == false) {
				touchLeft.fetchSample(touchSamplesLeft, 0);
				if(touchSamplesLeft[0] == 1) {
					moveBackLeft(mA, mB);
					float total = 0.0f;
					for (int i = 0; i < 5; i++) {
						ultrasonicSensor.fetchSample(ultrasonicSamples, 0);
						sampleVal = ultrasonicSamples[0];
						//LCD.drawInt((int)(sampleVal * 100), 0, 2);
						total += sampleVal;
					}
					float avg = total / 5.0f;
					//LCD.drawInt((int)(avg * 100), 0, 4);
					running.add(avg);
					calculateBackward(mA, mB, stop.elapsed());
					LCD.drawInt(stop.elapsed(), 0, 6);
				}
				//dt = System.currentTimeMillis() - dt;
				//LCD.drawInt((int)(100 * dt), 0, 3);
				//Delay.msDelay(1000);;
				
			} else {
				touchLeft.fetchSample(touchSamplesLeft, 0);
				if(touchSamplesLeft[0] == 1) {
					moveBackLeft(mA, mB);
					float total = 0.0f;
					for (int i = 0; i < 5; i++) {
						ultrasonicSensor.fetchSample(ultrasonicSamples, 0);
						sampleVal = ultrasonicSamples[0];
						//LCD.drawInt((int)(sampleVal * 100), 0, 2);
						total += sampleVal;
					}
					float avg = total / 5.0f;
					//LCD.drawInt((int)(avg * 100), 0, 4);
					running.add(avg);
					calculateBackward(mA, mB, stop.elapsed());
					LCD.drawInt(stop.elapsed(), 0, 6);
				}
				else {
					//count = 0;
					float total = 0.0f;
					for (int i = 0; i < goodReadings.size(); i++) {
						total += goodReadings.get(i);
					}
					float avg = total / (float) goodReadings.size();
					//LCD.drawInt((int)(avg * 100), 0, 4);
					distance = avg;
					running.add(avg);
					
					float difference = distance - desiredDistance;
					
					if(distance > desiredDistance){
						moveLeft(mA, mB, stop.elapsed());
						calculate(mA, mB, stop.elapsed());
						//dt = stop.elapsed();
						//LCD.drawInt((int)(dt), 0, 6);
						//Delay.msDelay(1000);
					} else if (distance < desiredDistance){
						moveRight(mA, mB, stop.elapsed());
						calculate(mA, mB, stop.elapsed());
					} else {
						equalMove(mA, mB, stop.elapsed());
						calculate(mA, mB, stop.elapsed());
					}
				}
				
			}
			
		}
		stop(mA, mB);
		
		mA.rotate(360);
		
		Delay.msDelay(500);
		
		mA.setSpeed(200);
		mB.setSpeed(200);
		forward(mA, mB);
		Delay.msDelay(time);
		stop(mA, mB);
		usltrasonic.close();
		touchLeft.close();
		touchRight.close();
		gyro.close();
	}
	
	static void calculate(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb, int ms){
		double dT = (double)ms/(double)(1000.0);
		double wl = ma.getRotationSpeed() * (PI / 180.0);
		double wr = mb.getRotationSpeed() * (PI / 180.0);
		double vl = wl * wheelRadius * 2;
		double vr = wr * wheelRadius * 2;
		double v = (vl + vr) / 2.0;
		
		double omega = (vr - vl) / L;
		heading += omega * dT;
		xCoordinate += v * dT * Math.cos(heading);
		yCoordinate += v * dT * Math.sin(heading);
		
	}
	
	static void calculateBackward(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb, int ms){
		double dT = (double)ms/(double)(1000.0);
		double wl = ma.getRotationSpeed() * (PI / 180.0);
		double wr = mb.getRotationSpeed() * (PI / 180.0);
		double vl = wl * wheelRadius / 2.0;
		double vr = wr * wheelRadius / 2.0;
		double v = (vl + vr) / 2.0;
		
		double omega = (vr - vl) / L;
		heading += omega * dT;
		xCoordinate += v * dT * Math.cos(heading);
		yCoordinate += v * dT * Math.sin(heading);
	}
	
	static void forward(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb){
		ma.startSynchronization();
		ma.forward();
		mb.forward();
		ma.endSynchronization();
	}
	
	static void stop(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb){
		ma.startSynchronization();
		ma.stop(true);
		mb.stop(true);
		ma.endSynchronization();
	}
	
	static void backward(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb){
		ma.startSynchronization();
		ma.backward();
		mb.backward();
		ma.endSynchronization();
	}
	
	static void moveBackLeft(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb) {
		ma.startSynchronization();
		ma.setSpeed(100);
		mb.setSpeed(200);
		backward(ma, mb);
		Delay.msDelay(1500);
		stop(ma, mb);
		ma.endSynchronization();
	}
	
	static void moveLeft(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb, int ms){
		ma.setSpeed(125);
		mb.setSpeed(200);
		forward(ma, mb);
//		float speed = .1588f;
//		heading += .0733 / L * (ms / 1000.0);
//		xCoordinate +=  (speed * ms / 1000.0 * Math.cos(heading)); yCoordinate += (speed * ms / 1000.0 * Math.sin(heading));
	}
	
	static void moveLeft(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb, float difference){
		int[] speeds = scaleSpeed(difference);
		ma.setSpeed(speeds[0]);
		mb.setSpeed(speeds[1]);
		forward(ma, mb);
	}
	static void moveRight(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb, int ms){
		ma.setSpeed(200);
		mb.setSpeed(125);
		forward(ma, mb);
//		float speed = .1588f;
//		heading += -.0733 / L * (ms / 1000.0);
//		xCoordinate += (speed * ms / 1000.0 * Math.cos(heading)); yCoordinate += (speed * ms / 1000.0 * Math.sin(heading));
	}
	static void moveRight(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb, float difference){
		int[] speeds = scaleSpeed(difference);
		ma.setSpeed(speeds[0]);
		mb.setSpeed(speeds[1]);
		forward(ma, mb);
		
	}
	static void equalMove(EV3MediumRegulatedMotor ma, EV3MediumRegulatedMotor mb, int ms){
		
		ma.setSpeed(125);
		mb.setSpeed(125);
		//.12217 m/s
		float speed = .12217f;
		forward(ma, mb);
		
		//xCoordinate += (speed * ms / 1000.0 * Math.cos(heading)); yCoordinate += (speed * ms / 1000.0 * Math.sin(heading));
	}
	
	static int[] scaleSpeed(float difference) {
		int[] speeds = new int[2];
		int leftSpeed = 150;
		int rightSpeed = 150;
		float scale = 20.0f;
		int speedIncrease;
		if (difference > 0) {
			float increase = (difference * 100) * scale;
			speedIncrease  = (int) increase;
			rightSpeed += speedIncrease;
		} else if(difference < 0) {
			float increase = (difference * 100 * -1) * scale;
			speedIncrease  = (int) increase;
			leftSpeed += speedIncrease;
		}
		speeds[0] = leftSpeed;
		speeds[1] = rightSpeed;
		return speeds;
	}
}